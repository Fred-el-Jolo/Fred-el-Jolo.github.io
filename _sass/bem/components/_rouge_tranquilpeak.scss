code.highlighter-rouge {
  padding: 2px 5px;
  line-height: 23px;
  margin-bottom: 30px;
  white-space: pre;
  word-break: inherit;
  word-wrap: inherit;
}

pre.highlight, code.highlighter-rouge {
  overflow-x: auto;
}

.highlight table td {
  padding: .3em 15px;
}

.highlight table td.rouge-gutter {
  border-right: solid 1px white;
}

.highlight table pre {
  margin: 0;
}

.highlight, .highlighter-rouge {
  font-feature-settings: "calt" 1;
  font-family: $fira-code;
  color: #f8f8f2;
  background: map-get($highlight-colors, "background");
}

.highlight .c {
  color: map-get($highlight-colors, "comment");
  font-style: italic;
} /* Comment */

.highlight .err {
  color: map-get($highlight-colors, "error");
  background-color: map-get($highlight-colors, "background");
} /* Error */

.highlight .k {
  font-weight: bold;
} /* Keyword */

.highlight .o {
  color: map-get($highlight-colors, "operator");
  font-weight: bold;
} /* Operator */

.highlight .cm {
  color: map-get($highlight-colors, "comment-multiline");
  font-style: italic;
} /* Comment.Multiline */

.highlight .cp {
  color: map-get($highlight-colors, "comment-preproc");
  font-weight: bold;
} /* Comment.Preproc */

.highlight .c1 {
  color: map-get($highlight-colors, "comment-single");
  font-style: italic;
} /* Comment.Single */

.highlight .cs {
  color: map-get($highlight-colors, "comment-special");
  font-weight: bold;
  font-style: italic;
} /* Comment.Special */

.highlight .gd {
  color: map-get($highlight-colors, "deleted");
  background-color: map-get($highlight-colors, "background");
} /* Generic.Deleted */

.highlight .gd .x {
  color: map-get($highlight-colors, "deleted");
  background-color: map-get($highlight-colors, "background");
} /* Generic.Deleted.Specific */

.highlight .ge {
  font-style: italic;
} /* Generic.Emph */

.highlight .gr {
  color: map-get($highlight-colors, "error-generic");
} /* Generic.Error */

.highlight .gh {
  color: map-get($highlight-colors, "heading");
} /* Generic.Heading */

.highlight .gi {
  color: map-get($highlight-colors, "inserted");
  background-color: map-get($highlight-colors, "background");
} /* Generic.Inserted */

.highlight .gi .x {
  color: map-get($highlight-colors, "inserted");
  background-color: map-get($highlight-colors, "background");
} /* Generic.Inserted.Specific */

.highlight .go {
  color: map-get($highlight-colors, "output");
} /* Generic.Output */

.highlight .gp {
  color: map-get($highlight-colors, "prompt");
} /* Generic.Prompt */

.highlight .gs {
  font-weight: bold;
} /* Generic.Strong */

.highlight .gu {
  color: map-get($highlight-colors, "sub-heading");
} /* Generic.Subheading */

.highlight .gt {
  color: map-get($highlight-colors, "traceback");
} /* Generic.Traceback */

.highlight .kc {
  font-weight: bold;
} /* Keyword.Constant */

.highlight .kd {
  color: map-get($highlight-colors, "declaration");
  font-weight: bold;
} /* Keyword.Declaration */

.highlight .kp {
  font-weight: bold;
} /* Keyword.Pseudo */

.highlight .kr {
  font-weight: bold;
} /* Keyword.Reserved */

.highlight .kt {
  color: map-get($highlight-colors, "type");
  font-weight: bold;
} /* Keyword.Type */

.highlight .m {
  color: map-get($highlight-colors, "number");
} /* Literal.Number */

.highlight .s {
  color: map-get($highlight-colors, "string");
} /* Literal.String */

.highlight .na {
  color: map-get($highlight-colors, "attribute");
} /* Name.Attribute */

.highlight .nb {
  color: map-get($highlight-colors, "builtin");
} /* Name.Builtin */

.highlight .nc {
  color: map-get($highlight-colors, "class");
  font-weight: bold;
} /* Name.Class */

.highlight .no {
  color: map-get($highlight-colors, "constant");
} /* Name.Constant */

.highlight .ni {
  color: map-get($highlight-colors, "entity");
} /* Name.Entity */

.highlight .ne {
  color: map-get($highlight-colors, "exception");
  font-weight: bold;
} /* Name.Exception */

.highlight .nf {
  color: map-get($highlight-colors, "funtion");
  font-weight: bold;
} /* Name.Function */

.highlight .nn {
  color: map-get($highlight-colors, "namespace");
} /* Name.Namespace */

.highlight .nt {
  color: map-get($highlight-colors, "tag");
} /* Name.Tag */

.highlight .nv {
  color: map-get($highlight-colors, "variable");
} /* Name.Variable */

.highlight .ow {
  color: map-get($highlight-colors, "operator");
  font-weight: bold;
} /* Operator.Word */

.highlight .w {
  color: map-get($highlight-colors, "whitespace");
} /* Text.Whitespace */

.highlight .mf {
  color: map-get($highlight-colors, "number-float");
} /* Literal.Number.Float */

.highlight .mh {
  color: map-get($highlight-colors, "number-hex");
} /* Literal.Number.Hex */

.highlight .mi {
  color: map-get($highlight-colors, "number-int");
} /* Literal.Number.Integer */

.highlight .mo {
  color: map-get($highlight-colors, "number-oct");
} /* Literal.Number.Oct */

.highlight .sb {
  color: map-get($highlight-colors, "string-backtick");
} /* Literal.String.Backtick */

.highlight .sc {
  color: map-get($highlight-colors, "string-char");
} /* Literal.String.Char */

.highlight .sd {
  color: map-get($highlight-colors, "string-doc");
} /* Literal.String.Doc */

.highlight .s2 {
  color: map-get($highlight-colors, "string-double");
} /* Literal.String.Double */

.highlight .se {
  color: map-get($highlight-colors, "string-escape");
} /* Literal.String.Escape */

.highlight .sh {
  color: map-get($highlight-colors, "string-heredoc");
} /* Literal.String.Heredoc */

.highlight .si {
  color: map-get($highlight-colors, "string-interpol");
} /* Literal.String.Interpol */

.highlight .sx {
  color: map-get($highlight-colors, "string-other");
} /* Literal.String.Other */

.highlight .sr {
  color: map-get($highlight-colors, "string-regex");
} /* Literal.String.Regex */

.highlight .s1 {
  color: map-get($highlight-colors, "string-single");
} /* Literal.String.Single */

.highlight .ss {
  color: map-get($highlight-colors, "string-symbol");
} /* Literal.String.Symbol */

.highlight .bp {
  color: map-get($highlight-colors, "builtin-pseudo");
} /* Name.Builtin.Pseudo */

.highlight .vc {
  color: map-get($highlight-colors, "variable-class");
} /* Name.Variable.Class */

.highlight .vg {
  color: map-get($highlight-colors, "global");
} /* Name.Variable.Global */

.highlight .vi {
  color: map-get($highlight-colors, "instance");
} /* Name.Variable.Instance */

.highlight .il {
  color: map-get($highlight-colors, "number-int");
} /* Literal.Number.Integer.Long */
