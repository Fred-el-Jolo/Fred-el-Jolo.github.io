// -----------------------------------------------------------------------------
// This file contains all application-wide Sass variables.
// -----------------------------------------------------------------------------

// Font families
$open-sans: "Open Sans";
$open-sans-sans-serif: "Open Sans", sans-serif;
$merriweather-serif: "Merriweather", serif;
$monospace: Menlo, Consolas, monospace;

$font-family-base: $open-sans-sans-serif;

$font-families: ("headings": $open-sans-sans-serif, "code": $monospace, "caption": $merriweather-serif, "image-gallery": $open-sans, "post-header-cover": $merriweather-serif, "post-meta": $open-sans-sans-serif, "post-content": $merriweather-serif, "post-excerpt-link": $open-sans-sans-serif, "highlight": $monospace, "sidebar": $open-sans-sans-serif);

/// Dark grey
/// @type Color
$dark-grey: hsl(203, 9%, 40%) !default;

$font-color-base: $dark-grey;

// Colors
$colors: ("success": #4dc657, "danger": #f5311d, "primary": #349ef3, "purple": #cf6ae0, "base": $font-color-base, "warning": #f5aa0a, "light": #9eabb3, "link": #349ef3);

// Highlight code
$highlight: ("background": #f7f8f8, "font-size": 1.4rem, "border": 1px solid, "line-height": 1.3em);

// Highlight colors
// name of colors: http://www.color-blindness.com
$highlight-colors: ("attribute": #a6e22e, "background": #1b1d1e, "builtin": #f8f8f2, "builtin-pseudo": #f8f8f2, "class": #a6e22e, "comment": #5e5d83, "comment-mutliline": #5e5d83, "comment-preproc": #465457, "comment-single": #5e5d83, "comment-special": #465457, "constant": #66d9ef, "declaration": #66d9ef, "deleted": #f92672, "entity": #f8f8f2, "error": #f8f8f2, "error-generic": #f92672, "exception": #a6e22e, "funtion": #a6e22e, "variable-global": #f8f8f2, "heading": #403d3d, "inserted": #a6e22e, "variable-instance": #f8f8f2, "namespace": #f8f8f2, "number": #af87ff, "number-float": #af87ff, "number-hex": #af87ff, "number-int": #af87ff, "number-oct": #af87ff, "operator": #f92672, "output": #403d3d, "prompt": #403d3d, "string": #d7d787, "string-backtick": #d7d787, "string-char": #d7d787, "string-doc": #d7d787, "string-double": #d7d787, "string-escape": #af87ff, "string-heredoc": #d7d787, "string-interpol": #d7d787, "string-other": #d7d787, "string-regex": #d7d787, "string-single": #d7d787, "string-symbol": #d7d787, "sub-heading": #465457, "tag": #f92672, "traceback": #f92672, "type": #66d9ef, "variable": #f8f8f2, "variable-class": #f8f8f2, "whitespace": #f8f8f2);

// Highlight text
$highlight-text-bg-colors: ("red": lighten(red, 45%), "green": lighten(green, 65%), "blue": lighten(blue, 45%), "purple": lighten(purple, 70%), "orange": lighten(orange, 40%), "yellow": lighten(yellow, 40%), "cyan": lighten(cyan, 40%), "primary": lighten(map-get($colors, "primary"), 35%), "success": lighten(map-get($colors, "success"), 35%), "warning": lighten(map-get($colors, "warning"), 40%), "danger": lighten(map-get($colors, "danger"), 40%));

/// Primary color
/// @type Color
$primary-color: hsl(36, 100%, 55%) !default;

/// Secondary color
/// @type Color
$secondary-color: hsl(36, 100%, 10%) !default;

/// Complementary color
/// @type Color
$complementary-color: hsl(205, 100%, 55%) !default;

/// Super light grey
/// @type Color
$super-light-grey: hsl(0, 0, 96) !default;

/// Light grey
/// @type Color
$light-grey: hsl(0, 0, 92) !default;

/// Light grey
/// @type Color
$medium-grey: hsl(203, 12%, 66%) !default;

/// Dark brown
/// @type Color
$dark-brown: hsl(36, 100%, 7%) !default;

/// Very dark grey
/// @type Color
$very-dark-grey: hsl(0, 0%, 29%) !default;

// $light-grey: hsl(0, 0, 90) !default;

// /// Cream
// /// @type Color
// $cream-color: hsl(36, 100%, 90%) !default;

// /// White
// /// @type Color
// $white: hsl(0, 0, 100) !default;

// /// Text color
// /// @type Color
// $text-color: $light-grey !default;

// /// Title color
// /// @type Color
// $title-color: $white !default;

// equal to 15px
$font-size-base: 1.6rem;
$line-height-base: 1.9em;
$letter-spacing-base: 0.01em;

// Reduction of font size base on small screen and down
$font-size-base-sm-screen-reduction-factor: 0.1rem;

// Reduction of headings font size on small screen and down
$headings-font-size-sm-screen-reduction-factor: 0.2rem;

// Reduction of headings font size on medium screen only
$headings-font-size-md-screen-reduction-factor: 0.15rem;

// Font size : (X.Xrem = XXpx, 1.0rem = 10px)
$font-size: ("xxlarge": 2rem, "xlarge": 1.8rem, "large": 1.7rem, "base": $font-size-base, "medium": 1.5rem, "small": 1.3rem, "xsmall": 1rem);

$headings-font-size: ("h1": 2.8rem, "h2": 2.4rem, "h3": 2rem, "h4": 1.8rem, "h5": 1.7rem, "h6": 1.6rem);

/// Container's maximum width
/// @type Length
$max-width: 1180px !default;

// Media Query Ranges
// If you want to change ranges screen size, you can do it easily by changing only `$screen-min` values
$screen-min: ("xs-min": 320px, "sm-min": 480px, "md-min": 768px, "lg-min": 1024px, "xlg-min": 1280px);

$screen-max: ("xs-max": map-get($screen-min, sm-min) - 1, "sm-max": map-get($screen-min, md-min) - 1, "md-max": map-get($screen-min, lg-min) - 1, "lg-max": map-get($screen-min, xlg-min) - 1);

// Merged screen-* Maps
$screen: map-merge($screen-min, $screen-max);

// Shortcuts for medias
$xsmall-and-down: "only screen and (max-width : #{map-get($screen, xs-max)})" !default;
$small-and-down: "only screen and (max-width : #{map-get($screen, sm-max)})" !default;
$small-only: "only screen and (min-width : #{map-get($screen, sm-min)}) and (max-width : #{map-get($screen, sm-max)})" !default;
$small-and-up: "only screen and (min-width : #{map-get($screen, sm-min)})" !default;
$medium-and-down: "only screen and (max-width : #{map-get($screen, md-max)})" !default;
$medium-only: "only screen and (min-width : #{map-get($screen, md-min)}) and (max-width : #{map-get($screen, md-max)})" !default;
$medium-and-up: "only screen and (min-width : #{map-get($screen, md-min)})" !default;
$large-and-down: "only screen and (max-width : #{map-get($screen, lg-max)})" !default;
$large-only: "only screen and (min-width : #{map-get($screen, lg-min)}) and (max-width : #{map-get($screen, lg-max)})" !default;
$large-and-up: "only screen and (min-width : #{map-get($screen, lg-min)})" !default;
$xlarge-and-up: "only screen and (min-width : #{map-get($screen, xlg-min)})" !default;
